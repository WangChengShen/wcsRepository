
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #配置上游的各个服务实例
    upstream Microservice{
        #ip_hash;#使用ip_hash后，同一个ip的请求会转发到同一个服务实例上去，这样可以解决因session不共享造成用户登录
                #不同步的问题（因为同一个ip访问的是同一个服务实例），然后软重启nginx(nginx -s reload )，这个套路叫会话粘滞
        server localhost:5726 weight=1;
        server localhost:5727 weight=3;
        server localhost:5728 weight=6;
        #默认是轮询
        #权重策略 按照1:3:6，在服务实例后添加weight,然后软重启nginx(nginx -s reload )
    }

    server { 
        listen       8088;
        server_name  localhost;#访问localhost:8088会把请求转发到http://Microservice,然后转给upstream Microservice，

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
           proxy_pass   http://Microservice;

            #在服务实例里面抓取访问来源会转是http://Microservice，如果想隐藏，则加以下配置，然后nginx.exe -s reload 重新加载下nginx （没成功）
           #proxy_redirect off;
           #proxy_set_header host $http_host;
           #proxy_set_header X-Real - IP $remote_addr;
           #proxy_set_header X-Forwarded - For $proxy_add_x_forwarded_for
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
