
大家熟知的GOF23中设计模式，源自《Design Patterns:Elements of Reusable Object-Oriented Software》
一书，有Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著，四人组Gang of Four 简称
GOF!,总结了在面向对象语言开发过程中常见问题的解决方案！

设计模式是面向对象语言开发过程中，遇到的种种场景和问题，然后提出的思路和解决方案，最后沉淀下来，
就成了设计模式。

设计模式其实就是解决问题的思路，是前辈总结出来的有效方式方法，就是套路！
学习设计模式，就是为了站在前辈的肩膀上，能更快捷优雅的解决面向对象程序开发设计问题。

设计模式的分类：
一.创建型（关注对象的创建）：
 1.单例模式
 2.工厂模式
 3.工厂方式模式
 4.原型模式
 5.建造者模式

 二.结构型（关注类与类之间的关系）（套路是包一层）：
 1.适配器模式（AdapterPattern）,还有个别名叫包装器（Wrapper）
 2.装饰器模式
 3.代理模式（Proxy）
 4.外观模式(或门面模式)
 5.桥接模式
 6.组合模式
 7.享元模式

 三.行为型（关注对象与行为之间的关系）（套路的甩锅）
 1.策略模式
 2.模版方法模式
 3.观察者模式
 4.迭代子模式
 5.责任链模式（ChainOfResponsibilityPattern）
    使多个对象都有处理请求的机会，从而避免了请求的发送者和接受者之间的耦合关系，将这些对象串成一条链，
    并沿着这条链传递该请求，直到有对象处理他为止。
    责任链模式是行为型设计模式的巅峰之作，无止境的行为封装转移；
 6.命令模式
 7.备忘录模式
 8.状态模式
 9.访问者模式
 10.中介在模式
 11.解释器模式


 组合优于继承！！！

 设计模式不是万能的，只是解决某种场景的办法，而且经常在解决一类问题的同时，会带来其他的问题，
 另外的问题会有对应的设计模式来解决，也就是更多的时间，设计模式是融合应用的，我们要做的，就是充分
 的扬长避短；


 设计模式的欠缺：
 结构型-行为型-大部分创建型，都是靠抽象来完成扩展性
 因为类是静态的，写好就固定了，想扩展？只能靠抽象-细节的替换，OOP想扩展，基本靠抽象
 这是OOP的困境；
 可以用AOP的思想去解决： AOP面向切片编程，可以在不破坏封装的前提下，去扩展通用功能；