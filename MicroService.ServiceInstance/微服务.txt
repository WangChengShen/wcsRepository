

******************************************************************
集群：多个完全相同的实例共同完成一件事，每个实例是完全一样的，都能独立处理这个事儿
集群好处：高可用，伸缩性ri

******************************************************************
服务注册与发现
consul(etcd/Zookeeper):
官网：https://www.consul.io

启动consul命令:
consul.exe agent -dev

在命令行里停止的话也是用ctrl+c

consul的默认端口是8500，所以访问地址：
http://127.0.0.1:8500

************************服务端和客户端******************************************
dotnet 注册把程序托管到端口
服务端
dotnet MicroService.ServiceInstance.dll  --urls="http://*:6001" --ip="127.0.0.1" --port=6001 --weight=1
dotnet MicroService.ServiceInstance.dll  --urls="http://*:6002" --ip="127.0.0.1" --port=6002 --weight=1
dotnet MicroService.ServiceInstance.dll  --urls="http://*:6003" --ip="127.0.0.1" --port=6003 --weight=1

客户端
dotnet MicroService.ClientDemo.dll  --urls="http://*:5726" --ip="127.0.0.1" --port=5726
******************************************************************
网关gateway
Ocelot
官网：https://threemammals.com/ocelot
网址：https://ocelot.readthedocs.io/en/latest/index.html
git:https//github.com/ThreeMammals/Ocelot


测试地址：
dotnet MicroService.GatewayDemo.dll  --urls="http://*:8002" --ip="127.0.0.1" --port=8002

好处：
1.有了网关就不用暴露服务实例，对服务实例可以起到保护作用；
2.除了保护还有可以做缓存（用Polly）；
3.限流：限制单位时间内服务响应的次数，超过就返回自定义信息
    虽然能水平扩展，但是总资源有限，流量超出，会选择限制请求数，
    保证部分请求能正常，牺牲部分请求;（在Ocelot配置文件里面直接可以配置限流 RateLimitOptions节点）
4.熔断:如果一个服务实例请求在单位时间内超过了预定的错误数，就把它当做是挂了，把他熔断掉，
   以后的请求就直接由网关返回错误信息；（在Ocelot配置文件里面直接可以配置限流 QoSOptions节点）
5.鉴权(IDS4(Identity Service 4) 或 JWT(Json Web Token))
   JWT(Json Web Token) 官网：https://jwt.io/
6.合并请求：把多个请求的结果包装成一个结果，然后返回给客户端，减少访问量

*******************************************************************